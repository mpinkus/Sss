@page "/reconstruct-secret"
@using MudBlazor
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject NavigationManager Navigation
@implements IAsyncDisposable

<PageTitle>Reconstruct Secret</PageTitle>

<MudContainer MaxWidth="MaxWidth.Large">
    <MudText Typo="Typo.h4" GutterBottom="true">
        <MudIcon Icon="Icons.Material.Filled.Restore" Class="mr-3" />
        Reconstruct Secret
    </MudText>

    <MudCard Elevation="2">
        <MudCardContent>
            <MudText Typo="Typo.h6" Class="mb-4">Upload Shares File</MudText>
            
            <MudFileUpload T="IBrowserFile" Accept=".json" FilesChanged="OnFileSelected" MaximumFileCount="1">
                <ActivatorContent>
                    <MudButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             StartIcon="Icons.Material.Filled.CloudUpload">
                        Select Shares JSON File
                    </MudButton>
                </ActivatorContent>
            </MudFileUpload>

            @if (!string.IsNullOrEmpty(selectedFileName))
            {
                <MudAlert Severity="Severity.Info" Class="mt-3">
                    Selected file: <strong>@selectedFileName</strong>
                </MudAlert>
            }

            @if (sharesLoaded)
            {
                <MudText Typo="Typo.h6" Class="mt-6 mb-4">Share Information</MudText>
                <MudSimpleTable Elevation="1" Class="mb-4">
                    <tbody>
                        <tr>
                            <td><strong>Total Shares:</strong></td>
                            <td>@sharesInfo.TotalShares</td>
                        </tr>
                        <tr>
                            <td><strong>Threshold Required:</strong></td>
                            <td>@sharesInfo.ThresholdRequired</td>
                        </tr>
                        <tr>
                            <td><strong>Organization:</strong></td>
                            <td>@sharesInfo.OrganizationName</td>
                        </tr>
                        <tr>
                            <td><strong>Created:</strong></td>
                            <td>@sharesInfo.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</td>
                        </tr>
                    </tbody>
                </MudSimpleTable>

                <MudText Typo="Typo.h6" Class="mb-4">Available Keepers</MudText>
                @foreach (var keeper in availableKeepers)
                {
                    <MudCard Class="mb-3" Elevation="1">
                        <MudCardContent>
                            <MudGrid AlignItems="Center">
                                <MudItem xs="12" md="3">
                                    <MudText Typo="Typo.subtitle1"><strong>@keeper.Name</strong></MudText>
                                    <MudText Typo="Typo.body2">Share #@keeper.ShareNumber</MudText>
                                </MudItem>
                                <MudItem xs="12" md="3">
                                    <MudText Typo="Typo.body2">@keeper.Email</MudText>
                                    <MudText Typo="Typo.body2">@keeper.Phone</MudText>
                                </MudItem>
                                <MudItem xs="12" md="4">
                                    <MudTextField @bind-Value="keeper.Password"
                                                Label="Password"
                                                InputType="InputType.Password"
                                                Disabled="@isProcessing" />
                                </MudItem>
                                <MudItem xs="12" md="2">
                                    <MudSwitch @bind-Value="keeper.IsSelected"
                                             Label="Use"
                                             Color="Color.Primary"
                                             Disabled="@isProcessing" />
                                </MudItem>
                            </MudGrid>
                        </MudCardContent>
                    </MudCard>
                }

                <MudAlert Severity="@(selectedKeepers.Count >= sharesInfo.ThresholdRequired ? Severity.Success : Severity.Warning)" Class="mt-4">
                    <MudText>
                        Selected @selectedKeepers.Count of @sharesInfo.ThresholdRequired required shares.
                        @if (selectedKeepers.Count >= sharesInfo.ThresholdRequired)
                        {
                            <strong>Ready to reconstruct!</strong>
                        }
                        else
                        {
                            <strong>Need @(sharesInfo.ThresholdRequired - selectedKeepers.Count) more shares.</strong>
                        }
                    </MudText>
                </MudAlert>

                @if (isProcessing)
                {
                    <MudCard Class="mt-4" Elevation="2">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Class="mb-3">Reconstruction Progress</MudText>
                            <MudProgressLinear Value="progressPercentage" Color="Color.Primary" Class="mb-2" />
                            <MudText Typo="Typo.body2">@currentMessage</MudText>
                            
                            @if (events.Any())
                            {
                                <MudExpansionPanels Class="mt-4">
                                    <MudExpansionPanel Text="Event Log">
                                        @foreach (var evt in events.TakeLast(10))
                                        {
                                            <MudText Typo="Typo.body2" Class="mb-1">@evt</MudText>
                                        }
                                    </MudExpansionPanel>
                                </MudExpansionPanels>
                            }
                        </MudCardContent>
                    </MudCard>
                }
                else if (reconstructionCompleted)
                {
                    <MudAlert Severity="@(reconstructionSuccessful ? Severity.Success : Severity.Error)" Class="mt-4">
                        <MudText Typo="Typo.body1">
                            <strong>@(reconstructionSuccessful ? "Secret Reconstructed Successfully!" : "Reconstruction Failed")</strong><br />
                            Session ID: @sessionId<br />
                            @completionMessage
                        </MudText>
                        @if (reconstructionSuccessful && !string.IsNullOrEmpty(reconstructedSecret))
                        {
                            <MudTextField Value="@reconstructedSecret"
                                        Label="Reconstructed Secret"
                                        InputType="InputType.Password"
                                        ReadOnly="true"
                                        Class="mt-3" />
                        }
                    </MudAlert>
                }
                else
                {
                    <MudButton Variant="Variant.Filled"
                             Color="Color.Primary"
                             StartIcon="Icons.Material.Filled.PlayArrow"
                             OnClick="StartReconstruction"
                             Disabled="@(selectedKeepers.Count < sharesInfo.ThresholdRequired)"
                             Class="mt-4"
                             Size="Size.Large">
                        Reconstruct Secret
                    </MudButton>
                }
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private HubConnection? hubConnection;
    private string selectedFileName = string.Empty;
    private string fileContent = string.Empty;
    private bool sharesLoaded = false;
    private SharesFileInfo sharesInfo = new();
    private List<KeeperDisplay> availableKeepers = new();
    
    private bool isProcessing = false;
    private bool reconstructionCompleted = false;
    private bool reconstructionSuccessful = false;
    private int progressPercentage = 0;
    private string currentMessage = string.Empty;
    private string sessionId = string.Empty;
    private string completionMessage = string.Empty;
    private string reconstructedSecret = string.Empty;
    private List<string> events = new();

    private List<KeeperDisplay> selectedKeepers => availableKeepers.Where(k => k.IsSelected).ToList();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/ceremonyhub"))
            .Build();

        hubConnection.On<object>("ProgressUpdate", (data) =>
        {
            var json = JsonSerializer.Serialize(data);
            var update = JsonSerializer.Deserialize<ProgressUpdate>(json);
            if (update != null)
            {
                progressPercentage = update.PercentComplete ?? 0;
                currentMessage = update.Message ?? string.Empty;
                events.Add($"{DateTime.Now:HH:mm:ss} - {currentMessage}");
                InvokeAsync(StateHasChanged);
            }
        });

        hubConnection.On<object>("CeremonyCompleted", (data) =>
        {
            var json = JsonSerializer.Serialize(data);
            var completion = JsonSerializer.Deserialize<CeremonyCompletion>(json);
            if (completion != null)
            {
                isProcessing = false;
                reconstructionCompleted = true;
                reconstructionSuccessful = completion.Success;
                completionMessage = completion.Message ?? string.Empty;
                sessionId = completion.SessionId ?? string.Empty;
                InvokeAsync(StateHasChanged);
                
                if (completion.Success)
                {
                    Snackbar.Add("Secret reconstructed successfully!", Severity.Success);
                }
                else
                {
                    Snackbar.Add("Reconstruction failed: " + completionMessage, Severity.Error);
                }
            }
        });

        await hubConnection.StartAsync();
    }

    private async Task OnFileSelected(IBrowserFile file)
    {
        try
        {
            selectedFileName = file.Name;
            
            using var stream = file.OpenReadStream(maxAllowedSize: 1024 * 1024);
            using var reader = new StreamReader(stream);
            fileContent = await reader.ReadToEndAsync();
            
            await ParseSharesFile();
            Snackbar.Add("Shares file loaded successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading file: {ex.Message}", Severity.Error);
        }
    }

    private async Task ParseSharesFile()
    {
        try
        {
            var sharesData = JsonSerializer.Deserialize<ShamirSecretOutput>(fileContent);
            if (sharesData != null)
            {
                sharesInfo = new SharesFileInfo
                {
                    TotalShares = sharesData.Configuration.TotalShares,
                    ThresholdRequired = sharesData.Configuration.ThresholdRequired,
                    OrganizationName = sharesData.Organization.Name,
                    CreatedAt = sharesData.CreatedAt
                };

                availableKeepers = sharesData.Keepers.Select(k => new KeeperDisplay
                {
                    Name = k.Name,
                    Email = k.Email,
                    Phone = k.Phone,
                    ShareNumber = k.ShareNumber,
                    Password = string.Empty,
                    IsSelected = false
                }).ToList();

                sharesLoaded = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error parsing shares file: {ex.Message}", Severity.Error);
        }
    }

    private async Task StartReconstruction()
    {
        try
        {
            isProcessing = true;
            reconstructionCompleted = false;
            progressPercentage = 0;
            currentMessage = "Starting reconstruction...";
            events.Clear();
            
            var request = new ReconstructSecretRequest
            {
                SharesFilePath = selectedFileName,
                Shares = selectedKeepers.Select(k => new ShareInput
                {
                    ShareNumber = k.ShareNumber,
                    KeeperName = k.Name,
                    Password = k.Password
                }).ToList()
            };

            var response = await Http.PostAsJsonAsync("api/ceremony/reconstruct-secret", request);
            
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<CeremonyResponse>();
                if (result?.Success == true && result.Data != null)
                {
                    reconstructedSecret = result.Data.ToString() ?? string.Empty;
                }
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                throw new Exception($"API call failed: {response.StatusCode} - {errorContent}");
            }
        }
        catch (Exception ex)
        {
            isProcessing = false;
            Snackbar.Add($"Error starting reconstruction: {ex.Message}", Severity.Error);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

    private class SharesFileInfo
    {
        public int TotalShares { get; set; }
        public int ThresholdRequired { get; set; }
        public string OrganizationName { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    private class KeeperDisplay
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public int ShareNumber { get; set; }
        public string Password { get; set; } = string.Empty;
        public bool IsSelected { get; set; }
    }

    private class ProgressUpdate
    {
        public string? SessionId { get; set; }
        public string? Message { get; set; }
        public int? PercentComplete { get; set; }
        public string? EventType { get; set; }
    }

    private class CeremonyCompletion
    {
        public string? Type { get; set; }
        public bool Success { get; set; }
        public string? Message { get; set; }
        public string? SessionId { get; set; }
    }

    private class ReconstructSecretRequest
    {
        public string SharesFilePath { get; set; } = string.Empty;
        public List<ShareInput> Shares { get; set; } = new();
    }

    private class ShareInput
    {
        public int ShareNumber { get; set; }
        public string KeeperName { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    private class CeremonyResponse
    {
        public bool Success { get; set; }
        public string Message { get; set; } = string.Empty;
        public string? SessionId { get; set; }
        public object? Data { get; set; }
    }

    private class ShamirSecretOutput
    {
        public ShamirConfiguration Configuration { get; set; } = new();
        public OrganizationInfo Organization { get; set; } = new();
        public DateTime CreatedAt { get; set; }
        public List<SecretKeeperRecord> Keepers { get; set; } = new();
    }

    private class ShamirConfiguration
    {
        public int TotalShares { get; set; }
        public int ThresholdRequired { get; set; }
    }

    private class OrganizationInfo
    {
        public string Name { get; set; } = string.Empty;
    }

    private class SecretKeeperRecord
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public int ShareNumber { get; set; }
    }
}
